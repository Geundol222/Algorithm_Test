우선순위 큐(힙) = PriorityQueue (Heap)

* 힙이란 부모노드가 항상 자식노드보다 우선순위가 높은 속성을 만족하는 트리기반의 자료구조이다.
힙은 이진트리를 이용한 트리기반의 자료구조이며, 배열이나 리스트와 같은 선형구조와는 다른 형태의 비선형 자료구조이다.
힙에서 부모는 항상 자식보다 높은 우선순위를 가져야하며, 만약 자식이 부모보다 높은 우선순위를 가지게 된다면, 그것은 힙이라고 할 수 없게 된다.
힙과 같은 트리기반의 자료구조의 조건은 다음과 같다.
1. 부모는 여러개의 자식을 둘 수 있다. 단, 이것이 부모가 무조건 자식을 가져야한다는 의미는 아니다. 부모는 자식을 가질수 있고 아닐 수 있다.
2. 부모와 자식은 철저한 상송구조여야하며, 자식이 부모를 역참조할 수 없다. 즉, 순환구조가 아니어야한다. 이것이 순환구조가 됐을 경우 트리가 아닌 그래프라 한다.
3. 트리의 종류는 부모가 최대로 가질 수 있는 자식의 수에 달려 있으며 이진트리의 경우 부모가 가질 수 있는 최대 자식의 수가 두개임을 의미한다.

* 트리기반 자료구조의 구현의 경우 노드기반 자료구조인 LinkedList를 활용하면 쉽게 구현해 볼 수 있다.
하지만, C#에서 노드기반의 자료구조는 GC에 부담을 일으킬 수 있으므로 잘 사용되지 않으며, 비효율 적이므로 배열기반의 자료형을 활용한다.
배열기반의 자료형은 연속적인 데이터로 이루어져 있기 때문에 중간인덱스를 비워두거나 할 수 없지만, 힙의 경우 노드의 모든 값이 유효한 완전이진트리의 형태이므로 배열기반 자료구조를 사용하여도 적합하다.
즉, 트리의 맨위 root를 0 인덱스로 설정하고 왼쪽 위부터 1, 2, 3... 의 순서로 배열에 저장해서 사용하는 방식이며, 각 부모와 자식에 해당하는 인덱스에 접근하는 방법은 다음과 같다.
1. 부모 인덱스 = (childIndex - 1) / 2
2. 왼쪽 자식 인덱스 = parentIndex * 2 + 1
3. 오른쪽 자식 인덱스 = parentIndex * 2 + 2

* 트리기반 자료구조의 핵심은 자료가 많을 때 왼쪽과 오른쪽을 선택해서 한 곳에서만 연산을 진행하면 되는 형태를 띄고 있다는 것이다.
추가의 경우 만약에 추가된 맨 마지막 노드가 왼쪽에 있을 경우 왼쪽의 값들만 확인해서 우선순위가 높은 순서로 재배치를 진행하게 되며,
삭제의 경우 맨 마지막 노드가 맨 위로 올라간 후 왼쪽과 오른쪽 중, 더 우선순위가 빠른 값을 확인해서 그 쪽 방향으로만 재배치를 진행하게 되기 때문에 시간 복잡도에서 O(n)인 선형자료구조보다 유리하다.
힙의 추가와 삭제는 O(logn)의 시간복잡도를 가진다.
이게 가능한 이유는 자식이 부모보다 높은 우선순위를 가질 수 없는 구조이기 때문이며, 부모가 바로 밑의 자식보다 더 높은 우선순위를 가졌다면 나머지 자식들은 볼 필요가 없으므로 연산이 빠르다.