연결 리스트 (LinkedList)

연결리스트는 배열 기반의 선형리스트와는 다르게 노드 기반의 리스트이다.
그렇기 때문에 인덱스를 사용하여 각 요소에 빠르게 접근할 수 있는 선형자료구조와는 달리 노드를 참조하고 있는 형식인 연결리스트는 요소 접근에 O(n)의 시간복잡도를 가져 불리하다.
접근에 O(n)의 시간복잡도를 가지는 이유는 노드에서 다음 노드로 넘어가면서 하나씩 값을 확인해봐야하기 때문인데 그 때문에 반복문을 사용하게 된다.
실제로 연결리스드의 Find함수는 반복문을 사용하여 노드를 탐색하게 된다.
반복문은 다중반복문을 사용하지 않는 이상 O(n)의 시간 복잡도를 가지므로 접근과 탐색은 O(n)의 시간복잡도를 가지게 된다.

하지만, 연결리스트의 가장 큰 장점은 특정 요소의 삽입과 삭제가 매우 빠르다는 것이다.
연결리스트는 연속적인 데이터가 아니기 때문에 특정값을 삭제하기 위해서는 인덱스들을 하나하나 찾아야하는 선형자료구조와는 달리 노드만 알고 있다면 그 노드만 지워주는 것이 가능하다.
삭제 뿐 아니라 삽입에서도 같은 장점을 가지며, 처리를 위해 노드 간의 연결을 바꿔주는 것 만으로 삽입과 삭제가 가능하므로 시간 복잡도는 O(1)로 매우 빠르다.

생성을 하게 되면 힙에 자신의 크기만큼 한꺼번에 할당 받는 선형자료구조와 달리 연결리스트는 Add할때마다 힙에 새로운 자리를 할당하고 그 주소를 참조하는 방식으로 동작한다.
하지만, C#에서는 연결리스트를 사용할 경우 힙영역안에서 Add와 Remove를 통해 추가되고 해제되고를 반복하기 때문에 GC에 큰 무리를 줄 수 있다.
따라서 C#에서 연결리스트는 신중하게 사용해야한다.
반면 할당한 데이터를 사용자가 직접 해제해 줄 수 있는 C++의 경우 연결리스트를 자주 사용하기도 한다.