이진탐색트리(BinarySearchTree)

* 이진탐색트리는 트리기반의 자료구조로서 탐색에 특화되어 있는 자료구조이다.
트리기반의 자료구조이기 때문에 특정 값을 찾을 경우 왼쪽과 오른쪽 중 조건이 맞는 곳을 확인하고 그 방향으로만 탐색을 진행하게 된다.
이러한 방법은 자료의 진입, 탐색, 추가, 삭제에 전부 활용되며, 따라서 모든 경우에서 시간 복잡도는 O(logn)을 가진다.

* 하지만, 이진탐색트리에는 구조적 취약점이 있는데, 만약에 추가되는 값이 우연히 큰값만 존재하게 되면 이진탐색트리의 불균형을 발생시킬 수 있다.
만약 1, 2, 3, 4, 5가 차례대로 입력된다면, 트리에서는 오른쪽으로의 추가만 이루어지게 되는데, 숫자가 적을 때에는 괜찮지만,
이진탐색트리는 기본적으로 대량의 자료를 보관하고 빠르게 탐색하기 위해 사용하는 자료구조이다.
따라서 매우 많은양의 데이터가 추가되었을 때 트리의 불균형이 존재한다면 즉, 최악의 상황이 되었다면 그 때의 시간 복잡도는 O(n)이 되어버리게 된다.
이때 이진탐색트리의 모든 경우의 시간 복잡도는 O(n)을 가지게 되고 장점이 사라지게 된다.
이러한 상황을 보완하기 위해 기본 이진탐색트리보다는 트리의 균형을 맞춰줄 수 있는 자가균형기능이 포함된 트리기반 자료구조를 사용하게된다.
대표적으로는 Red-Black Tree와 AVL Tree가 있다.
위의 자료구조는 트리에 불균형이 발생하였을 경우 특정 조건에 따라 트리를 우회전, 혹은 좌회전 하면서 최종적으로 트리의 균형을 맞춰주는 원리이다.

* 이진탐색트리는 비선형 자료구조로서 선형자료구조에 비해 정렬이 쉽지 않은 자료구조이다.
이진탐색트리의 값을 정렬하기 위해서는 중위순회라는 방법을 사용하게 되는데, 중위순회 방법은 왼쪽과 오른쪽 노드의 중간에 기준 노드가 들어가는 방법이다.
즉, 왼쪽 - 노드 - 오른쪽의 방식으로 들어가게 된다.
예를들어 1, 2, 3, 4, 5, 6, 7, 8, 9의 값이 순서와 상관없이 무작위로 들어가 있다고 가정하더라도,
1은 해당 값들 중 제일 작은 값이므로 항상 맨 왼쪽에 존재하게 될 것이다.
이를 기반으로 대충 상황을 그려보면,

											5
									2				8
								1		4		6		9
									   3		 7
해당 그림 상황 처럼 노드가 연결이 되어 있는데, 이때 중위순회 방식을 사용하면

  3   7
1 _4 6_ 9
_2__5__8_
---------

위와 같은 구조를 가지며, 숫자들을 모두 밑으로 내려보면 오름차순으로 정렬이 된 것을 확인해 볼 수 있다.