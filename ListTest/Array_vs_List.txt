배열과 선형리스트

1. 배열
배열은 같은 Type을 가지며 순차적으로 정렬된 선형 자료구조이다.
힙 메모리에 할당되게 되며, 처음 초기화 할때 고정된 값을 지정하여 사용한다 이렇게 고정된 크기는 소멸까지 고정되어 있다.
배열은 값을 넣은대로 순차적으로 인덱스에 저장되며, 이 덕분에 각 인덱스에 접근하는 데에 용이하다.
만약 int 자료형의 배열이 있다면, 배열의 첫번째 인덱스에서 다음 인덱스까지는 주소값에 4Byte를 더해주면 쉽게 다음 인덱스에 접근할 수 있으며 이로인해 인덱스 접근의 시간 복잡도는 O(1)이다.
배열의 인덱스들을 탐색하여 원하는 값을 얻기 위해서는 반복문을 통해 배열의 인덱스를 확인한 후 원하는 값을 도출해내는 방식이기 때문에 배열 탐색에는 O(n)의 시간 복잡도가 사용된다.
배열의 경우 중간 요소를 삭제하게 될 경우 인덱스들이 연속으로 존재해야하는 배열의 특성상 뒤에 있는 인덱스들을 앞으로 끌어오는 작업이 필요하며, 직접 구현해 주어야한다.
또한, 중간의 요소를 삭제하게 될 경우 인덱스들을 앞으로 끌어오면서도 맨 뒤에 있는 인덱스는 그대로 남게 되므로 삭제후 더이상 사용하지 않는다면 메모리에 자리를 그대로 차지하게 된다.

2. 리스트
선형리스트도 배열과 마찬가지로 같은 Type을 가지며 순차적으로 정렬된 선형 자료구조이다.
배열과 리스트가 다른점은 배열은 크기를 한 번 설정하면 메모리에 크기만큼 할당되어 크기를 변경할 수 없지만, 리스트의 경우는 배열의 크기를 동적으로 변경할 수 있다.
리스트는 저장 가능한 배열의 공간(Capacity)를 여유롭게 할당하여 사용하게 되며, Add함수를 통해 값을 넣어줄 경우 사용중인 공간(size)의 크기를 늘려가며 배열의 크기를 조정한다.
만약 Capacity가 허용치를 넘을경우 설정된 값에 의해 크기를 늘린 배열을 새로 생성하여 기존 배열의 값을 Copy해 주고 기존 배열은 메모리에서 해제된다.
Capacity를 너무 작게 설정해 놓는 경우 요소가 많아질 수록 새로 생성하는 배열이 많아져 자원을 많이 사용하게 되므로 Capacity는 여유롭게 할당한다.
리스트의 접근은 배열 기반 선형구조이므로 O(1)의 시간복잡도를 가지며, 탐색 또한 O(n)의 시간복잡도를 가진다.
배열과 달리 리스트는 원하는 값의 삽입과 삭제가 비교적 자유로우며, 배열과 마찬가지로 O(n)의 시간복잡도를 가지며 동작하지만, 배열처럼 인덱스의 제한을 받지 않는 다는 장점이 있다.