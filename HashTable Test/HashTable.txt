해시테이블(HashTable)

* 해싱과 해시함수
해시테이블은 특정 키 값과 데이터를 저장하기 위한 저장소이다.
지정된 키값을 해시함수로 해싱하여 해시테이블의 특정 위치(인덱스)로 직접 엑세스 할 수 있도록 만든 방식이다.
특정조건을 만족하면 지정된 인덱스에 바로 찾아가게 할 수 있기때문에 탐색, 삽입, 삭제에서 큰 이점이있다.
해싱은 지정된 키 값을 해시함수의 연산에 따라 고정된 값으로 만들고 그것을 인덱스에 맞게 재구성 하는 과정이다.
해싱이 진행되면, 키 값이 동일하다는 전재하에 항상 같은 고정값을 도출해 낼 수 있으며, 이는 해당 데이터의 위치를 특정하는데에 매우 효율적이다.
해싱의 연산은 버전마다 다르지만 sha-1 혹은 sha-256의 연산을 따르고 있으며, 보안상으로도 매우 우수한 방법이다.
따라서 해싱을 진행한 데이터는 키값만 알고 있다면 해당 인덱스를 바로 특정하여 탐색이 가능하므로 추가, 삭제와 더불어 O(1)의 매우 빠른 시간 복잡도를 가진다.

해시함수는 해싱을 진행해주는 함수이며, 해싱을 진행할 때 입력한 키값에 대한 결과가 항상 동일한 값이어야한다는 조건이 만족하는 함수를 말한다.
해시함수는 해싱을 진행하여 인덱스를 반환해주는 함수이기 때문에 속도가 매우 중요하여 처리속도가 빠를 수록 효율이 좋다. 즉, 해시함수의 연산이 느린경우에는 빠른 탐색이 가능하다는 해시테이블의 의의가 사라지낟.
또한, 해시함수의 결과는 밀집도 즉, 중복 값이 적어야한다.
해시함수를 통해 반환되는 인덱스가 모든 경우에서 중복이 없을 수는 없지만, 중복이 되면 될 수록 해시테이블의 탐색 효율은 낮아지므로, 해시함수를 통해 반환되는 인덱스는 최대한 중복이 없어야한다.
마지막으로 해시함수는 해시테이블의 크기가 클 수록 효율이좋다.
해시테이블의 크기가 크다는 것은 그만큼 저장할 수 있는 인덱스가 많아진다는 것을 의미하며, 이는 중복값에 대한 고려가 크기가 작은 해시테이블을 사용할 때보다 떨어진다는 것을 의미한다.
해시함수의 효율은 중복값의 반환이 최소가 될때 최대의 효율을 낼 수 있으므로 해시테이블의 크기가 커지면 그만큼 해시함수의 효율도 증가한다.


* 해시테이블의 충돌과 충돌해결방안
해시테이블은 매우 빠른 속도의 탐색과 추가, 삭제를 지원하지만, 해시테이블 사용에서 가장 주의해야할 것은 중복인덱스 문제이다.
해시함수가 서로 다른 키에 대해서 동일한 인덱스를 반환하게 될 경우 원래있던 데이터를 덮어쓰게 되는 문제가 발생하게 된다.
최대한 중복이 없게끔하는 것이 해시함수의 목적이지만, 가능한 모든 경우에 수에서 아예 중복값이 없게 만드는 것은 불가능에 가까우며, 이로인한 인덱스의 충돌은 막을 수 없다.
때문에, 인덱스의 충돌이 발생할경우 이를 해결하는 방법들이 있다.

첫번째는 체이닝이다.
체이닝은 해시 충돌이 발생했을 경우 충돌된 자리에 Linked List를 이용하여 데이터를 새로운 자리에 배치하고 연결하는 방식이다.
이런 식으로 연결을 해두면 나중에 탐색이 필요할 경우 해당 주소에 접근하고 Linked List를 순회하며 원하는 값을 찾아내게 된다.
충돌이 발생하면 탐색에 있어서 어쩔 수 없이 시간복잡도가 증가하게 되지만, 충돌을 해결할 수 있다는 점에서 고려해볼만한 선택지이다.
또한, 해시테이블에 자료가 많아지면서 그만큼 중복이 많아지더라도 성능의 저하는 크지 않아진다는 것이 장점이다.
하지만, 해시테이블 외에 추가적인 저장공간이 필요하기 때문에 그만큼 리소스를 잡아먹을 수 있으며, C#에서는 노드기반의 자료구조를 사용하기 때문에 체이닝을 사용하기는 힘들다.

두번째는 개방주소법이다.
해시 충돌이 발생하면 다른 빈공간에 데이터를 삽입하는 방식이다.
해시 충돌이 발생했을 경우 선형탐색, 제곱탐색, 이중해시등을 사용하여 다른 빈 공간을 선정하고 그 공간에 데이터를 삽입하게된다.
삽입한 데이터는 탐색시에도 삽입한 방식을 이용하여 찾게 된다.
개방주소법은 같은 데이터안에서 다른 빈공간을 찾아 데이터를 넣어주는 방식이므로 추가적인 저장공간이 필요하지않다는 장점이 있다.
하지만 해시테이블의 자료가 많아질 경우 성능저하가 많아지게 되는데, 해시테이블은 75%~85% 정도의 공간을 사용하고 나면 급격하게 성능이 저하되게 되므로 재해싱 과정을 진행해야한다.
재해싱이란 해시테이블의 크기를 늘리고 테이블 내의 모든 데이터를 다시 해싱하여 새로운 인덱스에 복사해주는 방식이다.